import java.io.*;
import java.util.*;

class Stock implements Serializable {
    String symbol;
    String name;
    double price;

    Stock(String symbol, String name, double price) {
        this.symbol = symbol;
        this.name = name;
        this.price = price;
    }
}

class Transaction implements Serializable {
    String stockSymbol;
    int quantity;
    boolean isBuy; // true = buy, false = sell

    Transaction(String stockSymbol, int quantity, boolean isBuy) {
        this.stockSymbol = stockSymbol;
        this.quantity = quantity;
        this.isBuy = isBuy;
    }
}

class Portfolio implements Serializable {
    Map<String, Integer> holdings = new HashMap<>();
    List<Transaction> transactions = new ArrayList<>();

    void buyStock(String symbol, int qty) {
        holdings.put(symbol, holdings.getOrDefault(symbol, 0) + qty);
        transactions.add(new Transaction(symbol, qty, true));
    }

    void sellStock(String symbol, int qty) {
        int current = holdings.getOrDefault(symbol, 0);
        if (qty > current) {
            System.out.println("Insufficient holdings to sell.");
            return;
        }
        holdings.put(symbol, current - qty);
        transactions.add(new Transaction(symbol, qty, false));
    }

    void viewHoldings(Map<String, Stock> market) {
        System.out.println("\n--- Portfolio Holdings ---");
        double total = 0;
        for (String symbol : holdings.keySet()) {
            int qty = holdings.get(symbol);
            Stock stock = market.get(symbol);
            double value = qty * stock.price;
            System.out.printf("%s (%s): %d shares @ $%.2f = $%.2f\n",
                    stock.name, symbol, qty, stock.price, value);
            total += value;
        }
        System.out.printf("Total Portfolio Value: $%.2f\n", total);
    }

    void viewTransactions() {
        System.out.println("\n--- Transaction History ---");
        for (Transaction t : transactions) {
            String action = t.isBuy ? "Bought" : "Sold";
            System.out.printf("%s %d shares of %s\n", action, t.quantity, t.stockSymbol);
        }
    }
}

public class StockTradingPlatform {
    static Map<String, Stock> market = new HashMap<>();
    static Portfolio portfolio = new Portfolio();
    static final String FILE = "portfolio.ser";

    public static void main(String[] args) {
        loadMarket();
        loadPortfolio();

        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n--- Stock Trading Platform ---");
            System.out.println("1. View Market Data");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. View Portfolio");
            System.out.println("5. View Transactions");
            System.out.println("6. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1 -> displayMarket();
                case 2 -> buyStock(sc);
                case 3 -> sellStock(sc);
                case 4 -> portfolio.viewHoldings(market);
                case 5 -> portfolio.viewTransactions();
                case 6 -> savePortfolio();
                default -> System.out.println("Invalid choice.");
            }
        } while (choice != 6);
    }

    static void displayMarket() {
        System.out.println("\n--- Market Data ---");
        for (Stock s : market.values()) {
            System.out.printf("%s (%s): $%.2f\n", s.name, s.symbol, s.price);
        }
    }

    static void buyStock(Scanner sc) {
        System.out.print("Enter stock symbol to buy: ");
        String symbol = sc.nextLine().toUpperCase();
        if (!market.containsKey(symbol)) {
            System.out.println("Stock not found.");
            return;
        }
        System.out.print("Enter quantity: ");
        int qty = sc.nextInt();
        sc.nextLine();
        portfolio.buyStock(symbol, qty);
        System.out.println("Bought " + qty + " shares of " + symbol);
    }

    static void sellStock(Scanner sc) {
        System.out.print("Enter stock symbol to sell: ");
        String symbol = sc.nextLine().toUpperCase();
        if (!market.containsKey(symbol)) {
            System.out.println("Stock not found.");
            return;
        }
        System.out.print("Enter quantity: ");
        int qty = sc.nextInt();
        sc.nextLine();
        portfolio.sellStock(symbol, qty);
    }

    static void loadMarket() {
        market.put("AAPL", new Stock("AAPL", "Apple Inc.", 180.00));
        market.put("GOOGL", new Stock("GOOGL", "Alphabet Inc.", 2800.00));
        market.put("AMZN", new Stock("AMZN", "Amazon.com Inc.", 3500.00));
        market.put("TSLA", new Stock("TSLA", "Tesla Inc.", 700.00));
    }

    @SuppressWarnings("unchecked")
    static void loadPortfolio() {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(FILE))) {
            portfolio = (Portfolio) in.readObject();
        } catch (Exception e) {
            portfolio = new Portfolio();
        }
    }

    static void savePortfolio() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(FILE))) {
            out.writeObject(portfolio);
        } catch (IOException e) {
            System.out.println("Error saving portfolio.");
        }
    }
}
